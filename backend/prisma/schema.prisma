generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String     @id @default(cuid())
  email             String     @unique
  pendingEmail      String?    @unique
  hashedPwd         String
  pseudo            String
  imageUrl          String?
  isConfirmed       Boolean    @default(false)
  isBanned          Boolean    @default(false)
  defaultVisibility Visibility @default(private)
  role              UserRole   @default(USER) // ðŸ‘ˆ ici
  createdAt         DateTime   @default(now())

  groups                   GroupMember[]
  createdGroups            Group[]                  @relation("UserCreatedGroups")
  prises                   Prise[]
  sessions                 Session[]                @relation("OrganisateurSessions")
  invites                  SessionInvite[]
  tokens                   EmailConfirmationToken[]
  passwordChangeTokens     PasswordChangeToken[]
  passwordResetTokens      PasswordResetToken[]
  accountSessions          AccountSession[]
  preferences              UserPreferences?
  spots                    Spot[]
  reports                  Report[]
  moderationLogs           ModerationLog[]
  sentGroupInvitations     GroupInvitation[]        @relation("UserSentGroupInvitations")
  receivedGroupInvitations GroupInvitation[]        @relation("UserReceivedGroupInvitations")
}

model AccountSession {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  lastSeen  DateTime @updatedAt
  userAgent String?
  ip        String?
}

enum UserRole {
  USER
  ADMIN
}

model Group {
  id          String            @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  creator     User              @relation("UserCreatedGroups", fields: [creatorId], references: [id], onDelete: Restrict)
  creatorId   String
  members     GroupMember[]
  prises      PriseGroup[]
  sessions    Session[]
  invitations GroupInvitation[]

  @@index([createdAt])
  @@index([creatorId])
}

model GroupMember {
  id       String    @id @default(cuid())
  user     User      @relation(fields: [userId], references: [id])
  userId   String
  group    Group     @relation(fields: [groupId], references: [id])
  groupId  String
  role     GroupRole @default(member) // ðŸ‘ˆ dÃ©faut ajoutÃ©
  joinedAt DateTime  @default(now())

  @@unique([userId, groupId])
  @@index([groupId, role])
  @@index([groupId])
}

enum GroupRole {
  admin
  member
  guest
}

model GroupInvitation {
  id            String           @id @default(cuid())
  groupId       String
  inviterId     String
  inviteeUserId String? // invitation directe (cible existante)
  token         String?          @unique @db.VarChar(255) // lien/QR (NULL autorisÃ©, unique sur valeurs non-null)
  expiresAt     DateTime?
  maxUses       Int?
  usedCount     Int              @default(0)
  status        InvitationStatus @default(PENDING)
  inviteeEmail  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  inviter User  @relation("UserSentGroupInvitations", fields: [inviterId], references: [id], onDelete: Restrict)
  invitee User? @relation("UserReceivedGroupInvitations", fields: [inviteeUserId], references: [id], onDelete: SetNull)

  @@index([groupId, status])
  @@index([inviteeUserId, status])
  @@index([inviterId])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  REVOKED
}

model PriseGroup {
  prise     Prise    @relation(fields: [priseId], references: [id], onDelete: Cascade)
  priseId   String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  createdAt DateTime @default(now())

  @@id([priseId, groupId])
  @@index([groupId])
}

model Prise {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  photoUrl    String
  espece      String
  materiel    String?
  date        DateTime
  description String?

  latitude   Float
  longitude  Float
  visibility Visibility

  createdAt      DateTime        @default(now())
  groupes        PriseGroup[]
  reports        Report[]
  moderationLogs ModerationLog[]

  @@index([userId])
  @@index([createdAt])
}

model Spot {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  name        String
  latitude    Float
  longitude   Float
  description String?
  isHidden    Boolean  @default(false)
  createdAt   DateTime @default(now())
  reports     Report[]

  @@index([userId])
  @@index([createdAt])
}

model Session {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  latitude    Float
  longitude   Float

  group       Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  organizer   User   @relation("OrganisateurSessions", fields: [organizerId], references: [id], onDelete: Restrict)
  organizerId String

  invites SessionInvite[]

  createdAt DateTime @default(now())

  @@index([groupId, date])
}

model SessionInvite {
  id          String    @id @default(cuid())
  session     Session   @relation(fields: [sessionId], references: [id])
  sessionId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  response    Response?
  respondedAt DateTime?

  @@unique([sessionId, userId])
  @@index([userId])
}

enum Response {
  yes
  no
  maybe
}

model EmailConfirmationToken {
  id        String   @id @default(cuid())
  token     String   @unique @db.VarChar(128)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model PasswordChangeToken {
  id           String   @id @default(cuid())
  token        String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  newHashedPwd String
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

enum Visibility {
  public
  private
  group
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model UserPreferences {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  darkMode      Boolean @default(false)
  mapTile       String  @default("default") // ex: "default", "satellite", "night"
  notifications Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id        String     @id @default(cuid())
  type      ReportType
  message   String?
  resolved  Boolean    @default(false)
  createdAt DateTime   @default(now())

  prise   Prise?  @relation(fields: [priseId], references: [id])
  priseId String?

  spot   Spot?   @relation(fields: [spotId], references: [id])
  spotId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@index([priseId])
  @@index([spotId])
  @@index([userId])
  @@index([priseId, resolved])
}

enum ReportType {
  USER
  PRISE
  SPOT
}

model ModerationLog {
  id          String           @id @default(cuid())
  action      ModerationAction
  priseId     String
  prise       Prise            @relation(fields: [priseId], references: [id], onDelete: Cascade)
  priseEspece String?
  userPseudo  String?
  adminId     String
  admin       User             @relation(fields: [adminId], references: [id], onDelete: Restrict)
  createdAt   DateTime         @default(now())

  @@index([createdAt])
}

enum ModerationAction {
  mask
  delete
  ignore
}
